function [x,value,w] = simplex1(A,b,c,freevars,varargin)
% 
% Find the solution of a linear programming problem in standard form
%  minimize c'x
%  subject to Ax=b
%             x >= 0
%
% function [x,value,w] = simplex1(A,b,c,freevars)
% 
% A, b, c: system problem
% freevars = (optional) list of free variables in problem
%
% x = solution
% value = value of solution
% w = (optiona)l solution of the dual problem.
%    If w is used as a return value, then the dual problem is also solved.
%    (In this implementation, the dual problem cannot be solved when free
%    variables are employed.)

% Copyright 1999 by Todd K. Moon


x=[];
value=[];
w=[];

flag_display=0;

mce_init=[];

for i=1:length(varargin)/2
    option=varargin{i*2-1};
    option_value=varargin{i*2};
    switch lower(option)
    case 'flag_display'
        flag_display=option_value;
    case 'mce_init'
        mce_init=option_value;
    otherwise
        fprintf('unknown option [%s]',option);
        fprintf('error!\n');
        return;
    end;
end;

w=[];
[m,n] = size(A);
nvars = n;                              % save this in case is changes
if(m >= n)
  error('must have more variables than constraints');
end
if(rank(A) < m)
  error('degenerate matrix');
end
value = 0;                              % value of the tableau
nfree = 0;                              % number of free variables

if(nargin == 4)         % a list of free variables was passed
  [A,b,c,value,savefree,nfree] = reducefree(A,b,c,freevars);
  [m,n] = size(A);
end


if(isempty(mce_init))
    if(flag_display)
        fprintf('simplex phase 1: solving init. solution...\n');
    end;

    % Phase I: Find a basic solution by the use of artificial variables
    idx = b<0; A(idx,:) = -A(idx,:); b(idx) = -b(idx);
    tableau = [A eye(m) b;  -sum(A,1) zeros(1,m) -sum(b)];
    [mn,nn] = size(tableau);
    basicptr = [n+1:n+m];

    [tableau,basicptr] = pivottableau_052203(tableau,basicptr,'flag_display',flag_display,'mode','init','n_var',n);
    sbasicptr = basicptr;
    B1i = tableau(1:m,n+1:n+m);             % for dual

    % Build the tableau for phase II
    tableau = [tableau(1:m,1:n) tableau(1:m,nn); c' value];
else
    if(flag_display)
        fprintf('simplex phase 1: solution init. provided...\n');
    end;
    keyboard;
    tableau = [A mce_init;c' value];
end;


%ci = tableau(end,sbasicptr)';           % for dual
%transform so there are zeros in the basic columns
for i = 1:m
 if(basicptr(i)<=length(c)) 
	tableau(mn,:) = tableau(mn,:) - c(basicptr(i))*tableau(i,:);
 end;
end

if(flag_display)
    fprintf('simplex phase 2: searching opt. solution...\n');
end;

% Phase II
[tableau,basicptr] = pivottableau_052203(tableau,basicptr,'flag_display',flag_display,'mode','opt');
%cf = tableau(end,sbasicptr)';           % for dual
x = zeros(1,n);
x(basicptr) = tableau(1:m,end);
value = -tableau(end,end);

if(nfree)
  x = restorefree(x,savefree,freevars);
end

%if(nargout==3)
%  if(nargin == 4)
%    error('Cannot find dual with free variables');
%end
%  w = B1i'*(ci-cf);                     % fix solution
%end
